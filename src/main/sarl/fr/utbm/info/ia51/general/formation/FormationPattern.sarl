/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.formation

import java.util.ArrayList
import java.util.Collections
import java.util.List

import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Vector2f

/** A formation composed of connected slots.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class FormationPattern {

	var leaderSpot : FormationSlot 
	val spots : List<FormationSlot> 

	/**
	 */
	new {
		this.leaderSpot = null
		this.spots = new ArrayList
	}
		
	/** Clear the formation body.
	 */
	protected def clear {
		this.leaderSpot = null
		this.spots.clear
	}

	private def addSpot(spot : FormationSlot) {
		this.spots += spot
		if (this.spots.size == 1) {
			this.leaderSpot = spot
		}
	}
	
	/** Replies the slots in the formation body.
	 * 
	 * @return the slots in the formation body.
	 */
	def getSlots : List<FormationSlot> {
		Collections::unmodifiableList(this.spots)
	}
	
	/** Replies the slot at the given index.
	 * 
	 * @param index
	 * @return the slot at the given index.
	 */
	def getSlotAt(index : int) : FormationSlot {
		this.spots.get(index)
	}

	/** Force this formation body to contains the given number of slots.
	 * 
	 * @param spotCount
	 */
	def scale(spotCount : int) {
		clear
		for(i : 0..<spotCount) {
			var spot = createSpot(i, spotCount)
			if (spot !== null) {
				addSpot(spot)
			}
		}
	}
	
	/** Create a slot for the given position in the formation body.
	 * 
	 * @param spotIndex is the position of the new slot.
	 * @param spotCount is the total number of slots in the formation.
	 * @return the created slot.
	 */
	protected abstract def createSpot(spotIndex : int, spotCount : int) : FormationSlot
	
	/** Change the global position of the formation, ie of the leader.
	 * 
	 * @param x
	 * @param y
	 */
	def setGlobalPosition(x : float, y : float) {
		if (this.leaderSpot !== null) {
			this.leaderSpot.setGlobalPosition(x, y)
		}
	}
	
	/** Change the global position of the formation, ie of the leader.
	 * 
	 * @param position
	 */
	@Inline("setGlobalPosition(($1).getX(), ($1).getY())")
	def setGlobalPosition(position : Point2f) {
		setGlobalPosition(position.x, position.y)
	}

	/** Change the global orientation of the formation, ie of the leader.
	 * 
	 * @param x
	 * @param y
	 */
	def setGlobalOrientation(x : float, y : float) {
		if (this.leaderSpot !== null) {
			this.leaderSpot.setGlobalOrientation(x,y)
		}
	}

	/** Change the global orientation of the formation, ie of the leader.
	 * 
	 * @param direction
	 */
	@Inline("setGlobalOrientation(($1).getX(), ($1).getY())")
	def setGlobalOrientation(direction : Vector2f) {
		setGlobalOrientation(direction.x, direction.y)
	}

	/** Replies the global position of the formation, ie of the leader.
	 * 
	 * @return the global position of the leader.
	 */
	def getGlobalPosition : Point2f {
		if (this.leaderSpot !== null) this.leaderSpot.globalPosition else new Point2f
	}

}