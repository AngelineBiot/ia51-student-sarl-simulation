/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.formation

import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.framework.math.Vector2f

/**
 * Formation with body guards.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class BodyGuardFormationPattern extends FormationPattern {

	/** Default radius of a spot.
	 */
	public static val SPOT_RADIUS = 20f
	
	/** Default space between two spots.
	 */
	public static val INTER_SPACE = 9f

	val spotRadius : float
	val interSpace : float
	
	/**
	 * @param slotCount is the count of slots in the formation.
	 * @param spotRadius radius of the spots.
	 * @param interSpace space between two adjacent spots.
	 */
	new (slotCount : int = 1, spotRadius : float = 20f, interSpace : float = 9f) {
		this.spotRadius = spotRadius
		this.interSpace = interSpace
		scale(slotCount);
	}

	override toString : String {
		"Body Guard n=" + this.slots.size
	}

	protected synchronized override createSpot(spotIndex : int, spotCount : int) : FormationSlot {
		var newSpot : FormationSlot 
		
		if (spotIndex == 0) {
			newSpot = new FormationSlot // leader
		} else {
			var angle = MathUtil::TWO_PI / (spotCount - 1)
			var radius = (this.spotRadius * 2f + this.interSpace) * (spotCount - 1) / MathUtil.TWO_PI
			var parent = getSlotAt(0)
			angle = (spotIndex - 1 + 0.5f) * angle
			var v = Vector2f::toOrientationVector(angle)
			v *= radius
			newSpot = new FormationSlot(v.x, v.y, angle, parent, spotIndex)
		}
		
		return newSpot
	}

}