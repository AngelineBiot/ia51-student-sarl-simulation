/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labworks.formation

import fr.utbm.info.ia51.framework.FrameworkLauncher
import fr.utbm.info.ia51.framework.gui.BehaviorTypeSelector
import fr.utbm.info.ia51.general.formation.BodyGuardFormationPattern
import fr.utbm.info.ia51.general.formation.FormationAssignment
import fr.utbm.info.ia51.labworks.formation.^agent.Follower
import fr.utbm.info.ia51.labworks.formation.^agent.Leader
import fr.utbm.info.ia51.labworks.formation.environment.WorldModel
import fr.utbm.info.ia51.labworks.formation.ui.GUI
import java.util.List

/**
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
agent PrescribedFormationBoot extends FrameworkLauncher {

	val WORLD_SIZE_X = 700f
	val WORLD_SIZE_Y = 700f
	val SLOT_COUNT = 15
	val FOLLOWER_COUNT = 10

	override initializeSimulation(parameters : List<Object>) : boolean {
		var type = BehaviorTypeSelector.open
		if (type !== null) {
			var formationAssignment = new FormationAssignment
			var formation = new BodyGuardFormationPattern(SLOT_COUNT)

			var environment = new WorldModel(WORLD_SIZE_X, WORLD_SIZE_Y)

			environment.createLeader
			for (i : 1 .. FOLLOWER_COUNT) {
				environment.createFollower
			}

			var gui = new GUI(WORLD_SIZE_X, WORLD_SIZE_Y, environment.timeManager, formation)

			var params = newArrayList
			params += #[
				formation,
				formationAssignment
			]
			params += parameters

			return initializeSimulation(environment, type, gui, params) [
				var agentType = it.type
				if ("LEADER" == agentType) {
					return typeof(Leader)
				}
				if ("FOLLOWER" == agentType) {
					return typeof(Follower)
				}
				throw new IllegalArgumentException
			]
		} else {
			return false
		}
	}

}
